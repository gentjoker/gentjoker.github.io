<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[OpenCV入门笔记(一)]]></title>
    <url>%2F2017%2F11%2F16%2FOpenCV%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[图像与原始字节的转换 从概念上讲,一个字节能表示0至255的整数。目前，对于多有的实时图像应用而言，虽然有其他的表示形式，但一个像素通常由每个通道的一个字节表示。 &emsp;&emsp;一个OpenCV图像是.array类型的二维或三维数组。8位的灰度图像是一个含有字节值得二维数组；一个24位BGR图像是一个三位数组，它也包含了字节值。可使用表达式访问这些值，如image[0][0]或者image[0][0][0]。第1个值代表像素的y坐标或者行，0表示最顶部，第2个值代表像素的x坐标或者列，0表示最左边，第3个值（如果有的话）代表颜色通道。如，对于一个左上角的白色像素的8位灰度图而，image[0][0]的值即为255，对于一个左上角的蓝色像素的24位BGR图而言，image[0][0]的值即为（0, 255, 0）。 &emsp;&emsp;可以用另外一种方法表示，如image[0][0]或者image[0][0]=128，也可表示为image.item((0, 0))或image.item((0, 0), 128)。对于单像素操作，第二种表示方式更加有效。 &emsp;&emsp;若一幅图像的每个通道为8位，则可将其显示转换成标准的一维Python byteArray格式： byteArray=bytearray(image) &emsp;&emsp;反之，bytearray含有恰当顺序的字节，可以通过显示转换和重构，得到numpy.array形式的图像： grayImage=numpy.array(grayByteArray).reshape(height, width) bgrImage=numpy.array(brgByteArray).reshape(height, width) &emsp;&emsp;下面介绍将含有随机字节的byteArray转换成灰度图像和BGR图像： 1. 随机字节转换成灰度图或彩色图 import cv2 import numpy as np import os # 创建一个含有120000个随机字节的数组 randomArray=bytearray(os.urandom(120000)) # os.urandom(n)返回n个随机的byte值的string，作为加密使用 flatByteArray=np.array(randomArray) # 将数组转换成400x300的灰度图 grayImage=flatByteArray.reshape(300, 400) cv2.imwrite('randomGray.png', grayImage) # 将数组转换成400x300的彩色图像 bgrImage=flatByteArray.reshape(100, 400, 3) cv2.imwrite('randomColor.png', bgrImage) &emsp;&emsp;运行该程序，将会在主程序目录下生成两张灰度图像，尺寸分别为400x100，400x400: &emsp;&emsp;使用Python标准的os.urandom()函数可以随机地生成原始字节,随后将原始字节转换为NumPy数组。需要注意的是，诸如numpy.random.randint(0, 256, 120000).reshape(300, 400)语句也能直接（并且高效地）随机生成NumPy数组。使用os.urandom()函数的原因是该语句有助于展示原始字节的转换。 2. 使用numpy.array()访问图像数据 &emsp;&emsp;加载OpenCV图像最简单的方式就是使用imread()函数，该函数会返回一幅图像，这幅图像是一个数组（根据imread()函数输入参数的不同，返回的数组可能是二维的，也可能是三维的）。 &emsp;&emsp;numpy.array结构针对数组操作有很好的优化，它允许某些块(bulk)操作，这些操作在通常的Python中不可用，这些特定的.array操作在OpenCV的图像处理中会很方便。利用numpy.array()函数来转换数组比用普通的Pythons数组转换要快得多。 import vc2 import numpy as np img=cv2.iread('flower.jpg') img[0][0]=[255, 255 ,255] cv2.imshow('my image', img) cv2.waitkey() &emsp;&emsp;运行该程序，结果如下所示： 左上方出现一个白点 &emsp;&emsp;假设想要改变一个特定像素的蓝色值，numpy.array提供和了item()方法。该函数有三个参数：x(或左)位置，y(或顶部)位置以及（x, y）位置的数组索引(注意，在BRG图像中，某一位置的数据是按B, G, R的顺序保存的三元数组)，该函数返回索引函数的值。另一个方法是通过itemset()函数可设定指定像素在制定通道上的值(itemset()方法有两个参数：一个三元组(x, y, 索引)和要设定的值)。如下例子将坐标(150,120)当前蓝色值125变成255。 import cv2 import numpy as np img=cv2.imread('flower.jpg') print(img.item(150, 120, 0)) # 打印当前的蓝色值 img.itemset((150, 120, 0), 255) print(img.item(150, 120, 0)) # 打印修改后的蓝色值 &emsp;&emsp;建议使用内置的滤波器和方法来处理整个图像，上述方法只适合于处理特定区域。 &emsp;&emsp;下面介绍操作通道：将制定的通道]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>图像处理</tag>
      </tags>
  </entry>
</search>
